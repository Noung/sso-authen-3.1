<?php

/**
 * sso-authen/config/config.php
 * * ไฟล์ตั้งค่าหลัก (Main Configuration File) ทำหน้าที่โหลดการตั้งค่าทั้งหมดที่จำเป็นสำหรับ SSO Handler
 */

// 1. โหลด Autoloader ของ Composer
// ทำให้เราสามารถเรียกใช้ Class จาก Library ทั้งหมดได้โดยอัตโนมัติ
require_once __DIR__ . '/../vendor/autoload.php';

// 2. เริ่มการทำงานของ Session มาตรฐาน PHP
// จำเป็นสำหรับเก็บค่า state และ client_id ชั่วคราวระหว่างการ Redirect
if (!session_id()) {
    session_start();
}

/**
 * ----------------------------------------------------------------------
 * การตั้งค่า OIDC Provider (ผู้ให้บริการยืนยันตัวตน)
 * ----------------------------------------------------------------------
 */
// 3. เลือกว่าจะใช้ Provider (มหาวิทยาลัย) ไหน
$activeProvider = 'psu'; // ตัวอย่าง: 'psu', 'cmu', 'ku', 'google', 'auth0', 'okta', 'custom_oidc' เป็นต้น

// 4. โหลดไฟล์ตั้งค่าของ Provider ที่เลือก
$providerConfigFile = __DIR__ . '/providers/' . $activeProvider . '.php';
if (!file_exists($providerConfigFile)) {
    die("Error: Configuration file for provider '{$activeProvider}' not found.");
}
// $providerConfig จะถูกใช้ใน SsoHandler
$providerConfig = require_once $providerConfigFile;

/**
 * ----------------------------------------------------------------------
 * ✨ (V.3) การตั้งค่าแอปพลิเคชันที่ได้รับอนุญาต (Authorized Clients)
 * ----------------------------------------------------------------------
 * โหลดข้อมูล clients จาก database แทน hard-coded array
 * ข้อมูลจะถูกจัดการผ่าน Admin Panel
 */

/**
 * โหลดข้อมูล authorized clients จาก database
 * @return array
 */
function loadAuthorizedClientsFromDatabase()
{
    try {
        // โหลดการตั้งค่า admin สำหรับเชื่อมต่อ database
        $adminConfig = require __DIR__ . '/../admin/config/admin_config.php';

        // เชื่อมต่อ database
        $dsn = sprintf(
            'mysql:host=%s;dbname=%s;charset=%s',
            $adminConfig['database']['host'],
            $adminConfig['database']['database'],
            'utf8mb4'
        );

        $pdo = new PDO(
            $dsn,
            $adminConfig['database']['username'],
            $adminConfig['database']['password'],
            $adminConfig['database']['options']
        );

        // ดึงข้อมูล clients ที่ active จาก database
        $stmt = $pdo->prepare("
            SELECT client_id, app_redirect_uri, post_logout_redirect_uri,
                   user_handler_endpoint, api_secret_key
            FROM clients 
            WHERE status = 'active'
        ");
        $stmt->execute();

        $clients = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $clients[$row['client_id']] = [
                'app_redirect_uri' => $row['app_redirect_uri'],
                'post_logout_redirect_uri' => $row['post_logout_redirect_uri'],
                'user_handler_endpoint' => $row['user_handler_endpoint'],
                'api_secret_key' => $row['api_secret_key']
            ];
        }

        return $clients;
    } catch (Exception $e) {
        // หากเกิดข้อผิดพลาดในการเชื่อมต่อ database ให้ใช้ fallback clients
        error_log("Failed to load clients from database: " . $e->getMessage());
        return getFallbackClients();
    }
}

/**
 * Fallback clients สำหรับกรณีที่ database ไม่สามารถเชื่อมต่อได้
 * @return array
 */
function getFallbackClients()
{
    return [
        // ตัวอย่างสำหรับ React/JS App
        'my_react_app' => [
            'app_redirect_uri'      => 'http://localhost:3000/callback',
            'post_logout_redirect_uri' => 'http://localhost:3000/logout-success',
            'user_handler_endpoint' => 'http://localhost:8080/api/sso-user-handler',
            'api_secret_key'        => 'VERY_SECRET_KEY_FOR_REACT_APP'
        ],

        // ตัวอย่างสำหรับ JavaScript App (ที่ใช้ Live Server)
        'my_js_app' => [
            'app_redirect_uri'      => 'http://localhost:5500/public/callback.html',
            'post_logout_redirect_uri' => 'http://localhost:5500/public/index.html',
            'user_handler_endpoint' => 'http://localhost:8080/sso-user-handler',
            'api_secret_key'        => 'VERY_SECRET_KEY_FOR_JS_APP'
        ],

        // ตัวอย่างสำหรับ Legacy PHP App
        'legacy_php_app' => [
            'app_redirect_uri'      => 'http://my-php-app.test/sso_callback.php',
            'post_logout_redirect_uri' => 'http://my-php-app.test/',
            'user_handler_endpoint' => 'http://my-php-app.test/api/user_handler.php',
            'api_secret_key'        => 'ANOTHER_SECRET_KEY_FOR_PHP_APP'
        ]
    ];
}

// โหลดข้อมูล clients จาก database
$authorized_clients = loadAuthorizedClientsFromDatabase();


/**
 * ----------------------------------------------------------------------
 * การตั้งค่า JWT (JSON Web Token)
 * ----------------------------------------------------------------------
 * การตั้งค่าเหล่านี้จะใช้ร่วมกันสำหรับทุกแอปพลิเคชันที่เชื่อมต่อ
 */
// 5. ตั้งค่า Secret Key สำหรับสร้าง JWT (ควรเป็นค่าสุ่มยาวๆ และเก็บเป็นความลับ)
define('JWT_SECRET_KEY', 'W_bZ,c.=ut*7Uszotwl._jxTyi*}2D:q:Mr2|8m9A;S?=i,,;bD6vKRC7+VsUlv-');

// 6. ตั้งค่าอายุของ Token (เช่น 1 ชั่วโมง = 3600 วินาที)
define('JWT_EXPIRATION', 3600);
